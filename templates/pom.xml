<!--

  vim:ts=2:sts=2:sw=2:et

  Author: Hari Sekhon
  Date: [% DATE # 2013-07-07 08:54:13 +0100 (Sun, 07 Jul 2013) %]

  [% URL %]

  [% LICENSE %]

  [% MESSAGE %]

  [% LINKEDIN %]

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.linkedin.harisekhon</groupId>
  <artifactId>[% NAME %]</artifactId>
  <version>0.1</version>
  <packaging>jar</packaging>

  <name>[% NAME %]</name>
  <url>https://github.com/harisekhon/[% NAME %]</url>
  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/harisekhon/[% NAME %]/issues</url>
  </issueManagement>
  <scm>
    <!-- for consistency with sonar-project.properties
    <connection>scm:svn:http://somerepository.com/svn_repo/trunk</connection>
    <developerConnection>scm:svn:https://somerepository.com/svn_repo/trunk</developerConnection>
    -->
    <url>https://github.com/harisekhon/[% NAME %]</url>
  </scm>
  <ciManagement>
    <system>Travis CI</system>
    <url>https://travis-ci.org/HariSekhon/[% NAME %]</url>
  </ciManagement>

  <!-- requires 'pom' as packaging, not jar
  <modules>
    <module>lib</module>
  </modules>

  In the module's pom.xml, put the following - this will mean it won't need to list any deps as they're handled in this pom:
  <parent>
    <artifactId>myParent</artifactId>
    <groupId>com.linkedin.harisekhon</groupId>
    <version>0.1</version>
    <relativePath>../pom.xml</relativePath>
  </parent>
  -->

  <properties>

    <!-- stops build from using platform dependent encoding and therefore being non-portable -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- variables -->
    <akka.version>2.3.15</akka.version>
    <covertura-maven-plugin.version>2.7</cobertura-maven-plugin.version>
    <commons-cli.version>1.3.1</commons-cli.version>
    <commons-lang.version>2.6</commons-lang.version>
    <coveralls-maven-plugin.version>4.2.0</coveralls-maven-plugin.version>
    <exec-maven-plugin.version>1.5.0</exec-maven-plugin.version>
    <guice.version>4.0</guice.version>
    <guice.scala.version>4.0.0</guice.scala.version>
    <jacoco-maven-plugin.version>0.7.7.201606060606</jacoco-maven-plugin.version>
    <jackson.version>2.7.1-1</jackson.version>
    <jodatime.version>2.9.4</jodatime.version>
    <junit.version>4.12</junit.version>
    <kafka.version>0.9.0.1</kafka.version>
    <log4j.version>1.2.17</log4j.version>
    <logback.version>1.1.5</logback.version>
    <maven-compiler-plugin.version>3.5.1</maven-compiler-plugin.version>
    <maven-jar-plugin.version>2.4</maven-jar-plugin.version>
    <maven-shade-plugin.version>2.4.3</maven-shade-plugin.version>
    <mockito.version>1.10.19</mockito.version>
    <scala.mm.version>2.10</scala.mm.version>
    <!-- Kafka 0.9 requires Scala 2.10.5+ -->
    <scala.version>2.10.6</scala.version>
    <scalatest.version>2.2.1</scalatest.version>
    <scala-maven-plugin.version>3.2.2</scala.maven.plugin.version>
    <slf4j.version>1.7.16</slf4j.version>
    <spark.version>2.2.3</spark.version>
    <spring.version>4.2.5.RELEASE</spring.version>
    <typesafe.config.version>1.3.0</typesafe.config.version>

  </properties>

  <!-- doing mvn install to m2/repository now instead
  <repositories>
    <repository>
      <id>project.local</id>
      <name>local</name>
      <url>file:repo</url>
    </repository>
  </repositories>
  -->

  <dependencies>

    <dependency>
      <groupId>com.linkedin.harisekhon</groupId>
      <artifactId>utils</artifactId>
      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>${commons-cli.version}</version>
    </dependency>

    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>${commons-lang.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka_${scala.mm.version}</artifactId>
      <version>${kafka.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>${guice.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-core_${scala.mm.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-hive_${scala.mm.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_${scala.mm.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-streaming_${scala.mm.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-yarn_${scala.mm.version}</artifactId>
      <version>${spark.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-all</artifactId>
      <version>4.1</version>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-compiler</artifactId>
      <version>${scala.version}</version>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-reflect</artifactId>
      <version>${scala.version}</version>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scalap</artifactId>
      <version>${scala.version}</version>
    </dependency>

    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.mm.version}</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.owasp.esapi</groupId>
      <artifactId>esapi</artifactId>
      <version>2.1.0.1</version>
    </dependency>

    <!-- another CLI parser -->
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>1.48</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe</groupId>
      <artifactId>config</artifactId>
      <version>${typesafe.config.version}</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-actor_${scala.mm.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-cluster_${scala.mm.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-contrib_${scala.mm.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-persistence-experimental_${scala.mm.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-testkit_${scala.mm.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-remote_${scala.mm.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <dependency>
      <groupId>net.codingwell</groupId>
      <artifactId>scala-guice_${scala.mm.version}</artifactId>
      <version>${guice.scala.version}</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>

    <!-- REMOVE: This only configures plugins in modules that reference it
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>net.alchim31.maven</groupId>
          <artifactId>scala-maven-plugin</artifactId>
          <version>3.2.1</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>2.3.2</version>
        </plugin>
      </plugins>
    </pluginManagement>
    -->

    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <source>1.${java.version}</source>
          <target>1.${java.version}</target>
          <compilerVersion>1.${java.version}</compilerVersion>
        </configuration>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-test-compile</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven-shade-plugin.version}</version>
        <configuration>
          <!-- put your configurations here -->
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Build an executable JAR -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven-jar-plugin.version}</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <classpathPrefix>lib/</classpathPrefix>
              <mainClass>com.linkedin.harisekhon.[% NAME %]</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Need to compile Scala code -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>${scala-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>scala-compile-first</id>
            <phase>process-resources</phase>
            <goals>
              <goal>add-source</goal>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-test-compile</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- mvn exec:java -Dexec.mainClass=org.apache.blah.something.Main -Dexec.args="<args>" -->
      <!-- mvn exec:java -Dexec.args="<args>" if specifying mainClass configuration below -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <configuration>
          <mainClass>com.linkedin.harisekhon.TODO</mainClass>
        </configuration>
      </plugin>

      <plugin>
          <groupId>org.eluder.coveralls</groupId>
          <artifactId>coveralls-maven-plugin</artifactId>
          <version>${coveralls-maven-plugin.version}</version>
          <configuration>
              <!-- <repoToken>yourcoverallsprojectrepositorytoken</repoToken> -->
          </configuration>
      </plugin>

      <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>cobertura-maven-plugin</artifactId>
          <version>${cobertura-maven-plugin.version}</version>
          <configuration>
              <format>xml</format>
              <maxmem>256m</maxmem>
              <!-- aggregated reports for multi-module projects -->
              <aggregate>true</aggregate>
          </configuration>
      </plugin>

      <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>
          <executions>
              <execution>
                  <id>prepare-agent</id>
                  <goals>
                      <goal>prepare-agent</goal>
                  </goals>
              </execution>
          </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>3.0.1</version>
        <configuration>
          <effort>Max</effort>
          <threshold>Low</threshold>
          <failOnError>true</failOnError>
          <!--
          <includeFilterFile>${session.executionRootDirectory}/findbugs-security-include.xml</includeFilterFile>
          <excludeFilterFile>${session.executionRootDirectory}/findbugs-security-exclude.xml</excludeFilterFile>
          -->
          <plugins>
            <plugin>
              <groupId>com.h3xstream.findsecbugs</groupId>
              <artifactId>findsecbugs-plugin</artifactId>
              <version>LATEST</version> <!-- Auto-update to the latest stable -->
            </plugin>
          </plugins>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>
